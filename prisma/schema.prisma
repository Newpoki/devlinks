datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String            @id @default(auto()) @map("_id") @db.ObjectId
    firstName          String?
    lastName           String?
    email              String?           @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    profilePlatformIds String[]          @db.ObjectId
    profilePlatforms   Platform[]        @relation(fields: [profilePlatformIds], references: [id])
    ProfilePlatform    ProfilePlatform[]
}

// model Profile {
//     id                 String            @id @default(auto()) @map("_id") @db.ObjectId
//     userId             String            @unique @db.ObjectId
//     user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
//     firstName          String?
//     lastName           String?
//     email              String?
//     profilePlatformIds String[]          @db.ObjectId
//     profilePlatforms   Platform[]        @relation(fields: [profilePlatformIds], references: [id])
//     ProfilePlatform    ProfilePlatform[]
// }

model ProfilePlatform {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    platformId String       @db.ObjectId
    platform   Platform     @relation(fields: [platformId], references: [id])
    userId     String       @db.ObjectId
    user       User         @relation(fields: [userId], references: [id])
    url        String
    name       PlatformName
    order      Int
}

// model ProfilePlatform {
//     id         String       @id @default(auto()) @map("_id") @db.ObjectId
//     platformId String       @db.ObjectId
//     platform   Platform     @relation(fields: [platformId], references: [id])
//     profileId  String       @db.ObjectId
//     profile    Profile      @relation(fields: [profileId], references: [id])
//     url        String
//     name       PlatformName
//     order      Int
// }

model Platform {
    id              String            @id @default(auto()) @map("_id") @db.ObjectId
    name            PlatformName
    userIds         String[]          @db.ObjectId
    users           User[]            @relation(fields: [userIds], references: [id])
    ProfilePlatform ProfilePlatform[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum PlatformName {
    GITHUB
    FRONTEND_MENTOR
    TWITTER
    LINKEDIN
    YOUTUBE
    FACEBOOK
    TWITCH
    DEVTO
    CODEWARS
    CODEPEN
    FREECODECAMP
    GITLAB
    HASNODE
    STACK_OVERFLOW
}
