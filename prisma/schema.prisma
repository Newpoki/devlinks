datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Profile       Profile[]
}

model Profile {
    id        String              @id @default(auto()) @map("_id") @db.ObjectId
    userId    String              @unique @db.ObjectId
    user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    firstName String?
    lastName  String?
    email     String?
    linkIds   String[]            @db.ObjectId
    links     SocialNetworkLink[] @relation(fields: [linkIds], references: [id])
}

model SocialNetworkLink {
    id         String            @id @default(auto()) @map("_id") @db.ObjectId
    label      String
    name       SocialNetworkName
    profileIds String[]          @db.ObjectId
    profiles   Profile[]         @relation(fields: [profileIds], references: [id])
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum SocialNetworkName {
    GITHUB
    FRONTEND_MENTOR
    TWITTER
    LINKEDIN
    YOUTUBE
    FACEBOOK
    TWITCH
    DEVTO
    CODEWARS
    CODEPEN
    FREECODECAMP
    GITLAB
    HASNOTE
    STACK_OVERFLOW
}
