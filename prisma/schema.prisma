datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    firstName       String?
    lastName        String?
    email           String?        @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    userPlatformIds String[]       @db.ObjectId
    userPlatforms   Platform[]     @relation(fields: [userPlatformIds], references: [id])
    UserPlatform    UserPlatform[]
}

model UserPlatform {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    platformId String       @db.ObjectId
    platform   Platform     @relation(fields: [platformId], references: [id])
    userId     String       @db.ObjectId
    user       User         @relation(fields: [userId], references: [id])
    url        String
    name       PlatformName
    order      Int
}

model Platform {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    name         PlatformName
    userIds      String[]       @db.ObjectId
    users        User[]         @relation(fields: [userIds], references: [id])
    UserPlatform UserPlatform[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum PlatformName {
    GITHUB
    FRONTEND_MENTOR
    TWITTER
    LINKEDIN
    YOUTUBE
    FACEBOOK
    TWITCH
    DEVTO
    CODEWARS
    CODEPEN
    FREECODECAMP
    GITLAB
    HASNODE
    STACK_OVERFLOW
}
